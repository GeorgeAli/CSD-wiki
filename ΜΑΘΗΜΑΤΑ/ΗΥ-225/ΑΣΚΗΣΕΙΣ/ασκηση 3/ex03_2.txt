Ερώτημα i

Κάνοντας διάφορους πειραματισμούς με διάφορα stinrg στο data segment του QtSpim παρατήρησα ότι τόσο όσον αφορά τους αριθμούς αλλά και τόσο όσον αφορά τα γράμματα η κωδικοποίση του QtSpim είναι ομοιόμορφη
Character	Hexademical(ASCII)	Binary(ASCII)
a		61			0110 0001		
b		62			0110 0010
c		63			0110 0011	
d		64			0110 0100
e		65			0110 0101
f		66			0110 0110
g		67			0110 0111
h		68			0110 1000
j		6a			0110 1010
k		.			.
l		.			.
m		.			.
n		.			.	
o		.			.
p		.			.
q		.			.
r		.			.
s		.			.
t		.			.
u		.			.
v		.			.
w		.			.
x		.			.
y		.			.
z		.			.

0		30			0011 0000
1		31			0011 0001
2		32			0011 0010
3		.			.
4		.			.
5		.			.
6		.			.
7		.			.
8		.			.
9		.			.


Ερώτημα ii

Τα xyz στον κώδικα ascii εχουν κωδικοποιηση στο δεκαδικο αντιστοιχα: 120,121,122
Εστω Big Endian Machine:
word16:(MS) x | y | z | \0 (LS)
Θα γραφτει στη μνημη: 1ο byte: 01111000	,bin
				2ο byte: 01111001	,bin
				3o byte: 01111010	,bin
				4o byte: 00000000	,bin
Decimal: 0x2^0 + 1x2^1 + 0x2^2 + 1x2^3 + 1x2^4 + 1x2^5 + 1x2^6 + 0x2^7 + 1x2^8 + 0x2^9 + 0x2^10 + 1x2^11 + 1x2^12 + 1x2^13 + 1x2^14 + 0x2^15 + 0x2^16 + 0x2^17 + 0x2^18 + 1x2^19 + 1x2^20 + 1x2^21 + 1x2^22 + 0x2^23 + 0 =

	= 7895418


Εστω Little Endian Machine:
word16:(MS) \0 | z | y | x (LS)
Θα γραφτει στη μνημη: 1ο byte: 00000000	,bin
				2ο byte: 01111010	,bin
				3o byte: 01111001	,bin
				4o byte: 01111000	,bin
Decimal: 0 + 0x2^0 + 0x2^1 + 0x2^2 + 1x2^3 + 1x2^4 + 1x2^5 + 1x2^6 + 0x2^7 + 1x2^8 + 0x2^9 + 0x2^10 + 1x2^11 + 1x2^12 + 1x2^13 + 1x2^14 + 0x2^15 + 0x2^16 + 1x2^17 + 0x2^18 + 1x2^19 + 1x2^20 + 1x2^21 + 1x2^22 + 0x2^23 =
		
	= 8026488

Ερωτημα iii

Ετρεξα το πρόγραμμα σε υπολογιστη με Intel 64-bit processor και μου εκτυπωσε κανονικα 8026488. Δηλαδη ειναι Little Endian Machine. Το αποτελεσμα θα αλλαζε σε καποιον υπολογιστη με Big Endian Machine (BEM) χωρις να γνωριζω ομως ποιες εταιρες χρησιμοποιουν τετοια αρχιτεκτονικη. Προφανως αν το τεσταρω σε BEM θα πρεπει να εκτυπωσει 7895418




