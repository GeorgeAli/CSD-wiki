1)1 process pola threads me koinoxristo address space
 
  ola se 1 cpu 

  *main thread to arxiko

  scheduling???? automata ?? me sleep??

2)Mirazonte ta threads logo 1 process

  address space
  shares global variables
  file descriptors
  signal handlers
  alarms
  current directory state
  child processes

3)Kathe thread exi 
  program counter
  registers
  local variables
  stack (enoite ston koinoxristo address space)
  state

4)Ta threads ean den exoun multicore,tote trexoun pseutoparallila

4)Logoi xrisis ton threads

  1)o kirios logos xrisis tous se single cpu einai gia na apofigo to blockarisma
    px diepafi den thelo na blokari,ean thelo na kano kapio argo ipologismo 
       to bazo se ena thread kai to trexo kai sinexizi i diepafi(main thread)
       na perni events
 
  2)xrisi polaplon cpu ean ine diathesimes

  3)kostizoun poli ligotero apo nea process (10 eos 100x pio ligo xrono)
    kai i enalagi ektelesis ton thread apo tin cpu einai poli pio eukoli 
 
  4)Kapia simia sta applications einai diaxorismena apo tin fisi tous 
    kai ilopoiounte kalitera os diaxorismena

     px clients se database server


5)Problimata ton threads
  1)sinxronismos diskolos

    Sinxronismos simeni na oriso diladi tin sosti seira
    San na itan 1 thread toulaxiston sta simia pou i seira exi simasia

  2)epikoinonia

  3)simfonia stin prosbasi se koinoxristous porous

6)3 tropoi ilopoiisis enos server
   1 thread blocking
   pola threas blocking IO
   1 thread non blocking IO

7)Create a new thread

  pthread_create(orisma pia sinartisi tha trexi)
  kathe thread exi akereo os ID


  #include <pthread.h>
  int pthread_create(pthread_t *thread, pthread_attr_t *attr,
                     void*  (*start_routine)(void *), void *arg);

  pthread_t = ekei apothikeuete to id tou thread otan ftiaxti

  pthread_attr_t *attr =  attributes ,sinithos NULL

  void*  (*start_routine)(void *) = i sinartisi pou tha trexi sto neo thread
    //ta void* ginonte match me olous tous pointers.alla anagastika i proti
    //function exi 1 argument
    
  void *arg = to orisma pou tha perasi stin start_routine

  returns 0 => ola ok. (alios !=0 iparxi lista me pithana error numbers)

8)p_thread_exit()  

  Tin kali to thread otan teliosi miazi me exit() stis process
  pauei na iparxi to thread kai to stack tou
    
  #include <pthread.h>
  void pthread_exit(void *retval);
    

9)p_thread_join 
 
   San wait,tin perimeni eos otou teliosi ena sigekrimeno thread
   
   #include <pthread.h>
   int pthread_join(pthread_t th, void **thread_return);

   Den tin xrisimopoio aparetita tin xrisimopoio mono otan thelo na perimeno
   kapio thread pou teliose,gia na paro to orisma pou ebale stin pthread_exit
   to thread (timi tou thread_return).Ta thread pou den me niazi na ta perimeno
   legonte detached threads kai otan ta ano init bazo sigekrimeno attr.
   Pio kato gia detached threads+attr

10)thread yield => to thread apo epilogi tou dini tin cpu se alo

11)Ta threads mporoun na ilopoiithoun se user space i kernel space i mixi


12)user space threads
   To litourgio mpori na einai single threaded se kernel mode kai ta threads na 
   iparxoun mono se process tou user

   Mazi me libraries  xirismos tous se user space
   => kathe process xriazete ena thread table gia na elenxi ta threads tis

   Gia kathe thread to thread table exi
   program counter, stack pointer, registers, state

   Switch ginete otan kapio thread kani mia apo epilogi tou mia blocking call 
   px px join => perimeni kapio alo thread i px kalite i sleep ktl

   Mia procedure soni ta pragmata tou thread ston ton thread table,epilegete kapio 
   ready thread apo ton thread table kai xekinaei auto(allazi program counter)

   Thetika
    1)einai oti gia na kalo threads den einai anagi na kano trap se kernel mode 
      pou argi 
    2)mpori o user na ftiaxi ton schedular,den einai thema tou litourgikou
    3)den mplekonte me resources tou kernel pou xriazonte gia alla pragmata
  
    Se user level omos ta threads mporoun na kanoun tis enalages tous me kritiria tou
   aplication,to kernel den xeri ti kanoun ta threads oste na krini  

   Arnitika
   1)Systems calls => block all threads (ektos ean to kernel einai multithreaded)
     Kai sinithos ta aplication pou xrisimopoioun threads einai applications pou kanoun
     poles systems calls (genika i logiki ton threads einai na ekmetaleuome to blocking
     kai to IO einai poli sixnos logos block)

     Problima me tis systems calls giati ean px kaleso kati pou perimeni 
     px to pliktrologio kai auto argisi kolane ola ta threads
     px page fault mexri na mou bri tin addres sto disko argi

     scheduler activations(sel 114)
      Otan kapio user thread ginete block px blocking system call,
      tote to kernel stelni ena upcall gia na trexi alo thread
      kai otan mpori na to exipiretisi tote pali upcall gia na pi oti mpori na
      xekolisi to kolimeno thread(egine oti xriazotane)

   2)i enalagi basizete se epilogi tou thread na kalesi blocking call px sleep wait ktl
     den ginete automata => mpori kapio thread na monopolisi tin cpu
     *software clocs mporoun na xrisimopoiithoun alla problimatika

   
13)kernel space threads
   Edo kathe process pou trexi se kernel mode mpori na exi threads
   Xirismos tous ginete me idikes kernel sinartisis
   (px dimiourgia katastrofi tous ktl)
   O thread table einai apothikeumenos se kernel space

   Gia system call den einai anagi na allaxo mode => gia block px IO einai kala

   Einai pio arga
   i dimiourgia kai katastrofi tou argi pio poli => recycling
   episis kathe klisi pou kanoun kai mpori block ginete san system call
    => argoun perisotero
   episis kanoun pio poliploko to kernel code pou ta xirizete

   Se kernel mode ta threads apo diaforetikes processes mporoun na enalasonte
   (auto den mpori na gini se user level)

14)hybrid

   pola kernel threads pou to kathe na exi user level threads
   ta user apo user level xirismo
   kai ta kernel apo kernel level xirismo

   pthread ftiaxno 1 thread,pou nomizo exi tmimata kai sto kernel kai sto user

16)Pop up threads

   Xrisima sta distributed systems
   Anti na exo mia process i thread monima na elenxi ean iparxi minina oste na to
   epexergasti
   otan do minima ftiaxno ena thread kai auto to epexergazete,kai meta termatizi

17)Metatropi single threaded programatos se multithreaded  sel 116

26)Thread Scheduling

   O tropos pou kano to scheduling diaferi analoga me to ean einai kernel/user level

   Se user level i process perni kapio xrono kai apo ekei kai pera ta threads 
   apofasizoun kai o thread schedule kani tis allages

   Se kernel mode ta threads apo diaforetikes processes mporoun na enalasonte
   (auto den mpori na gini se user level)

   Se kernel einai poli pio arges oi enalages,to basiko problima einai to memory map
   and having the memory cache pou allazoun(se user den allazoun)

   Se kernel omos otan ginete px IO block piano ena alo thread,eno se user kolane ola 
   kai perimenoun

   Se user level omos ta threads mporoun na kanoun tis enalages tous me kritiria tou
   aplication,to kernel den xeri ti kanoun ta threads oste na krini   
